# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore

## User settings
xcuserdata/
.claude/
build/
## compatibility with Xcode 8 and earlier (ignoring not required starting Xcode 9)
*.xcscmblueprint
*.xccheckout

## compatibility with Xcode 3 and earlier (ignoring not required starting Xcode 4)
build/
DerivedData/
*.moved-aside
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3

## Obj-C/Swift specific
*.hmap

## App packaging
*.ipa
*.dSYM.zip
*.dSYM

## Playgrounds
timeline.xctimeline
playground.xcworkspace

# Swift Package Manager
#
# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
# Packages/
# Package.pins
# Package.resolved
# *.xcodeproj
#
# Xcode automatically generates this directory with a .xcworkspacedata file and xcuserdata
# hence it is not needed unless you have added a package configuration file to your project
# .swiftpm

.build/

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
Pods/
#
# Add this line if you want to avoid checking in source code from the Xcode workspace
# *.xcworkspace

# Carthage
#
# Add this line if you want to avoid checking in source code from Carthage dependencies.
# Carthage/Checkouts

Carthage/Build/

# Accio dependency management
Dependencies/
.accio/

# fastlane
#
# It is recommended to not store the screenshots in the git repo.
# Instead, use fastlane to re-generate the screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/

fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots/**/*.png
fastlane/test_output

# Code Injection
#
# After new code Injection tools there's a generated folder /iOSInjectionProject
# https://github.com/johnno1962/injectionforxcode

iOSInjectionProject/

# OSX
.DS_Store

# Environments
.env
.env.local
.env.production
Scripts/env-local.sh

# VSCode
.vscode/

# AppCode
.idea/

# Backup files
*~.nib
*.swp
*.orig

# Build folders
Release/
Debug/

# Archives
*.xcarchive

# AppStore packages
*.app

# Temporary files
*.tmp
*.temp

# Logs
*.log

# Custom
*.xcuserstate
project.xcworkspace
xcuserdata
UserInterfaceState.xcuserstate
.build
fastlane/README.md

# Tuist
.tuist
Tuist/.build
*.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings
# Ignore auto-generated workspace scheme (we keep only our custom "All Tests" scheme)
*-Workspace.xcscheme

# Firebase
# Keep Firebase config files out of version control (contains sensitive API keys)
App/Resources/Firebase/GoogleService-Info-Dev.plist
App/Resources/Firebase/GoogleService-Info-UAT.plist
App/Resources/Firebase/GoogleService-Info-Prod.plist
GoogleService-Info.plist
# Firebase Service Accounts
firebase-service-account.json
*-firebase-adminsdk-*.json


# Created by https://www.gitignore.io/api/swift,macos

### macOS ###
*.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

### Swift ###
# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore

## Build generated
DerivedData/

## Various settings
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata/

## Other
*.moved-aside
*.xccheckout
*.xcscmblueprint

## Obj-C/Swift specific
*.hmap
*.ipa
!cli/Tests/Fixtures/*.ipa

## Playgrounds
timeline.xctimeline
playground.xcworkspace

# Swift Package Manager
#
# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
# Packages/
# Package.pins
.build/
.swiftpm

# CocoaPods - Refactored to standalone file

# Carthage - Refactored to standalone file

# End of https://www.gitignore.io/api/swift,macos

**/*.xcodeproj
**/*.xcworkspace/*
!**/*.xcworkspace/xcshareddata
**/*.xcworkspace/xcshareddata/*
!**/*.xcworkspace/xcshareddata/swiftpm
**/*.xcworkspace/xcshareddata/swiftpm/*
!**/*.xcworkspace/xcshareddata/swiftpm/configuration
.byebug_history
*.xcarchive
tmp/
/build/

.env
.idea/
/Carthage/Checkouts
*.profraw
tuist.zip
TODO
TODO.md
mkmf.log
.rubocop-http---shopify-github-io-ruby-style-guide-rubocop-yml
generated_fixtures
.fixtures.generated.json
**/Derived/
Tuist.xcworkspace
node_modules
Fixture

Tuist/Dependencies/SwiftPackageManager
Tuist/Dependencies/graph.json

# VSCode Settings
.vscode/launch.json

# Release artifacts
.bundle

.claude/
*.p12
./minio