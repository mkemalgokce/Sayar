name: Deploy to UAT

on:
  push:
    branches:
      - develop
  workflow_dispatch:

permissions:
  contents: write

# Prevent concurrent deployments
concurrency:
  group: deploy-uat
  cancel-in-progress: false

jobs:
  # Run CI checks before deployment
  ci-checks:
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  deploy:
    needs: ci-checks
    runs-on: macos-26

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Homebrew
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /opt/homebrew/Cellar/git-cliff
            /opt/homebrew/Cellar/libgit2
            /opt/homebrew/Cellar/tuist
          key: ${{ runner.os }}-brew-deploy-${{ hashFiles('.github/workflows/deploy-uat.yml') }}
          restore-keys: |
            ${{ runner.os }}-brew-deploy-
            ${{ runner.os }}-brew-

      - name: Install git-cliff
        run: |
          brew install git-cliff
          brew link --overwrite git-cliff
          brew link --overwrite libgit2

      - name: Generate release notes
        run: |
          # Generate plain text release notes for Firebase (no Markdown)
          git-cliff --config .github/cliff/cliff-firebase.toml --unreleased --strip all > $RUNNER_TEMP/release-notes.txt

          # Check if release notes are empty
          if [ ! -s $RUNNER_TEMP/release-notes.txt ] || [ $(wc -l < $RUNNER_TEMP/release-notes.txt) -lt 2 ]; then
            echo "Bug fixes and improvements." > $RUNNER_TEMP/release-notes.txt
          fi

      - name: Select Xcode version
        run: sudo xcode-select -switch /Applications/Xcode_26.0.app

      - name: Show Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Cache Tuist
        uses: actions/cache@v4
        with:
          path: |
            ~/.tuist
            Tuist/.build
          key: ${{ runner.os }}-tuist-${{ hashFiles('**/Project.swift', 'Tuist/Package.swift') }}
          restore-keys: |
            ${{ runner.os }}-tuist-

      - name: Install Tuist
        run: |
          brew install tuist
          tuist version

      - name: Install dependencies
        run: |
          tuist install

      - name: Setup Firebase config
        env:
          FIREBASE_CONFIG_UAT: ${{ secrets.FIREBASE_CONFIG_UAT }}
        run: |
          mkdir -p App/Resources/Firebase
          echo "$FIREBASE_CONFIG_UAT" | base64 --decode > App/Resources/Firebase/GoogleService-Info-UAT.plist

      - name: Generate Tuist project
        run: |
          tuist generate

      - name: Get and prepare build number
        id: build_number
        run: |
          # Get current UAT build number
          CURRENT_BUILD=$(grep "CURRENT_PROJECT_VERSION_UAT" Config/BuildNumbers.xcconfig | awk '{print $3}')
          NEW_BUILD=$(expr $CURRENT_BUILD + 1)

          # Update UAT build number in BuildNumbers.xcconfig (don't commit yet)
          sed -i '' "s/CURRENT_PROJECT_VERSION_UAT = .*/CURRENT_PROJECT_VERSION_UAT = $NEW_BUILD/" Config/BuildNumbers.xcconfig

          echo "current_build=$CURRENT_BUILD" >> $GITHUB_OUTPUT
          echo "new_build=$NEW_BUILD" >> $GITHUB_OUTPUT
          echo "üì¶ UAT Build number: $CURRENT_BUILD -> $NEW_BUILD"

      - name: Create temporary keychain
        env:
          CERTIFICATE_P12: ${{ secrets.CERTIFICATE_P12 }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)

          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          echo "$CERTIFICATE_P12" | base64 --decode > certificate.p12
          security import certificate.p12 -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security list-keychain -d user -s "$KEYCHAIN_PATH"

      - name: Install provisioning profile
        env:
          PROVISIONING_PROFILE_UAT: ${{ secrets.PROVISIONING_PROFILE_UAT }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$PROVISIONING_PROFILE_UAT" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

      - name: Build and archive
        env:
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
          PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.PROVISIONING_PROFILE_SPECIFIER_UAT }}
        run: |
          xcodebuild clean archive \
            -workspace Sayar.xcworkspace \
            -scheme "Sayar UAT" \
            -configuration UAT \
            -archivePath $RUNNER_TEMP/Sayar.xcarchive \
            -destination 'generic/platform=iOS' \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=$DEVELOPMENT_TEAM \
            PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_SPECIFIER" \
            DEBUG_INFORMATION_FORMAT=dwarf-with-dsym

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/Sayar.xcarchive \
            -exportPath $RUNNER_TEMP/export \
            -exportOptionsPlist .github/deployment/ExportOptions-UAT.plist

      - name: Upload to Firebase App Distribution
        id: firebase_upload
        env:
          GOOGLE_APPLICATION_CREDENTIALS_BASE64: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_BASE64 }}
          FIREBASE_APP_ID_UAT: ${{ secrets.FIREBASE_APP_ID_UAT }}
        run: |
          set -e  # Exit on any error

          # Install Firebase CLI if not already installed
          curl -sL https://firebase.tools | bash

          # Setup Google credentials
          echo "$GOOGLE_APPLICATION_CREDENTIALS_BASE64" | base64 --decode > $RUNNER_TEMP/google-credentials.json
          export GOOGLE_APPLICATION_CREDENTIALS=$RUNNER_TEMP/google-credentials.json

          # Upload to Firebase App Distribution
          if firebase appdistribution:distribute $RUNNER_TEMP/export/Sayar.ipa \
            --app $FIREBASE_APP_ID_UAT \
            --groups "uat-testers" \
            --release-notes-file $RUNNER_TEMP/release-notes.txt; then
            echo "‚úÖ Firebase upload successful"
          else
            echo "‚ùå Firebase upload failed"
            exit 1
          fi

      - name: Update CHANGELOG and build number after successful deployment
        if: success()
        env:
          NEW_BUILD: ${{ steps.build_number.outputs.new_build }}
        run: |
          set -e  # Exit on error

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Pull latest changes with rebase to avoid conflicts
          git fetch origin develop
          git rebase origin/develop || {
            echo "‚ùå Failed to rebase with remote changes"
            git rebase --abort
            exit 1
          }

          # Generate updated CHANGELOG after rebase
          git-cliff --config .github/cliff/cliff.toml --unreleased --output CHANGELOG.md

          # Add both CHANGELOG and BuildNumbers.xcconfig
          git add CHANGELOG.md Config/BuildNumbers.xcconfig

          # Commit if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "chore(uat): update CHANGELOG and bump build number to $NEW_BUILD [skip ci]"

            # Push with retry logic
            for i in {1..3}; do
              if git push origin develop; then
                echo "‚úÖ CHANGELOG and UAT build number committed: $NEW_BUILD"
                break
              else
                echo "‚ö†Ô∏è Push failed, retrying ($i/3)..."
                sleep 2
                git pull --rebase origin develop
              fi

              if [ $i -eq 3 ]; then
                echo "‚ùå Failed to push after 3 attempts"
                exit 1
              fi
            done
          else
            echo "‚ÑπÔ∏è No changes to commit"
          fi

      - name: Clean up keychain
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
