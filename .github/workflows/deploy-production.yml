name: Deploy to Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  deploy:
    runs-on: macos-26

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Homebrew
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /opt/homebrew/Cellar/git-cliff
            /opt/homebrew/Cellar/libgit2
            /opt/homebrew/Cellar/tuist
          key: ${{ runner.os }}-brew-deploy-${{ hashFiles('.github/workflows/deploy-production.yml') }}
          restore-keys: |
            ${{ runner.os }}-brew-deploy-
            ${{ runner.os }}-brew-

      - name: Cache Tuist
        uses: actions/cache@v4
        with:
          path: |
            ~/.tuist
            Tuist/.build
          key: ${{ runner.os }}-tuist-${{ hashFiles('**/Project.swift', 'Tuist/Package.swift') }}
          restore-keys: |
            ${{ runner.os }}-tuist-

      - name: Install git-cliff
        run: |
          brew install git-cliff
          brew link --overwrite git-cliff
          brew link --overwrite libgit2

      - name: Install Tuist
        run: |
          brew install tuist
          tuist version

      - name: Install dependencies
        run: |
          tuist install

      - name: Setup Firebase config
        env:
          FIREBASE_CONFIG_PROD: ${{ secrets.FIREBASE_CONFIG_PROD }}
        run: |
          mkdir -p App/Resources/Firebase
          echo "$FIREBASE_CONFIG_PROD" | base64 --decode > App/Resources/Firebase/GoogleService-Info-Prod.plist

      - name: Generate Tuist project
        run: |
          tuist generate

      - name: Get version from tag
        id: version
        run: |
          # Extract version from tag (v1.2.3 -> 1.2.3)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Version from tag: $VERSION"

          # Validate semantic versioning format
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "   Expected format: v1.2.3 (semantic versioning)"
            exit 1
          fi

          echo "‚úÖ Version format validated"

      - name: Validate CHANGELOG and check for changes
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Check if there are unreleased changes
          UNRELEASED_CHANGES=$(git-cliff --unreleased --strip all)

          if [ -z "$UNRELEASED_CHANGES" ]; then
            echo "‚ùå No unreleased changes found in CHANGELOG"
            echo "   Cannot create release without changes"
            echo "   Please make sure you have commits since the last release"
            exit 1
          fi

          echo "‚úÖ Found unreleased changes:"
          echo "$UNRELEASED_CHANGES"

      - name: Check if tag already deployed to TestFlight
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Check if CHANGELOG already contains this version
          if grep -q "## \[${VERSION}\]" CHANGELOG.md 2>/dev/null; then
            echo "‚ö†Ô∏è  Warning: Version ${VERSION} already exists in CHANGELOG"
            echo "   This might be a re-deployment or the tag was created before"
          else
            echo "‚úÖ Version ${VERSION} is new"
          fi

      - name: Generate CHANGELOG content
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          git-cliff --unreleased --tag "v${VERSION}" --prepend CHANGELOG.md

      - name: Select Xcode version
        run: sudo xcode-select -switch /Applications/Xcode_26.0.app

      - name: Show Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Create temporary keychain
        env:
          CERTIFICATE_P12: ${{ secrets.CERTIFICATE_P12 }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)

          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          echo "$CERTIFICATE_P12" | base64 --decode > certificate.p12
          security import certificate.p12 -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security list-keychain -d user -s "$KEYCHAIN_PATH"

      - name: Install provisioning profile
        env:
          PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$PROVISIONING_PROFILE" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

      - name: Build and archive
        env:
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
          PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}
        run: |
          xcodebuild clean archive \
            -workspace Sayar.xcworkspace \
            -scheme "Sayar Prod" \
            -configuration Prod \
            -archivePath $RUNNER_TEMP/Sayar.xcarchive \
            -destination 'generic/platform=iOS' \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=$DEVELOPMENT_TEAM \
            PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_SPECIFIER" \
            DEBUG_INFORMATION_FORMAT=dwarf-with-dsym

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/Sayar.xcarchive \
            -exportPath $RUNNER_TEMP/export \
            -exportOptionsPlist .github/deployment/ExportOptions-Prod.plist

      - name: Setup App Store Connect API key
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        run: |
          mkdir -p ~/.appstoreconnect/private_keys
          echo "$APP_STORE_CONNECT_API_KEY_CONTENT" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY_ID}.p8

      - name: Upload to TestFlight
        id: testflight_upload
        shell: bash
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          xcrun altool --validate-app -f $RUNNER_TEMP/export/Sayar.ipa -t ios --apiKey $APP_STORE_CONNECT_API_KEY_ID --apiIssuer $APP_STORE_CONNECT_ISSUER_ID --use-old-altool
          xcrun altool --upload-app -f $RUNNER_TEMP/export/Sayar.ipa -t ios --apiKey $APP_STORE_CONNECT_API_KEY_ID --apiIssuer $APP_STORE_CONNECT_ISSUER_ID --use-old-altool
          echo "‚úÖ TestFlight upload successful"

      - name: Commit CHANGELOG after successful deployment
        if: success()
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          if ! git diff --staged --quiet; then
            git commit -m "chore(release): update CHANGELOG for v${VERSION} [skip ci]"
            git push origin HEAD:master || echo "‚ö†Ô∏è Failed to push CHANGELOG, but deployment was successful"
            echo "‚úÖ CHANGELOG updated for v${VERSION}"
          else
            echo "‚ÑπÔ∏è No CHANGELOG changes to commit"
          fi

      - name: Clean up keychain
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
