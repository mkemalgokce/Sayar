name: Deploy to Production

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write

jobs:
  deploy:
    runs-on: macos-26

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install git-cliff
        run: |
          brew install git-cliff

      - name: Install Tuist
        run: |
          brew install tuist
          tuist version

      - name: Install dependencies
        run: |
          tuist install

      - name: Setup Firebase config
        env:
          FIREBASE_CONFIG_PROD: ${{ secrets.FIREBASE_CONFIG_PROD }}
        run: |
          mkdir -p App/Resources/Firebase
          echo "$FIREBASE_CONFIG_PROD" | base64 --decode > App/Resources/Firebase/GoogleService-Info-Prod.plist

      - name: Generate Tuist project
        run: |
          tuist generate

      - name: Get version from project
        id: version
        run: |
          VERSION=$(xcodebuild -workspace Sayar.xcworkspace -scheme "Sayar Prod" -showBuildSettings | grep MARKETING_VERSION | awk '{print $3}' | head -n 1)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Version: $VERSION"

      - name: Generate CHANGELOG content
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          git-cliff --unreleased --tag "v${VERSION}" --prepend CHANGELOG.md

      - name: Select Xcode version
        run: sudo xcode-select -switch /Applications/Xcode_26.0.app

      - name: Show Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Create temporary keychain
        env:
          CERTIFICATE_P12: ${{ secrets.CERTIFICATE_P12 }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)

          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          echo "$CERTIFICATE_P12" | base64 --decode > certificate.p12
          security import certificate.p12 -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security list-keychain -d user -s "$KEYCHAIN_PATH"

      - name: Install provisioning profile
        env:
          PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$PROVISIONING_PROFILE" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

      - name: Build and archive
        env:
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
          PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}
        run: |
          xcodebuild clean archive \
            -workspace Sayar.xcworkspace \
            -scheme "Sayar Prod" \
            -configuration Prod \
            -archivePath $RUNNER_TEMP/Sayar.xcarchive \
            -destination 'generic/platform=iOS' \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=$DEVELOPMENT_TEAM \
            PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_SPECIFIER" \
            DEBUG_INFORMATION_FORMAT=dwarf-with-dsym

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/Sayar.xcarchive \
            -exportPath $RUNNER_TEMP/export \
            -exportOptionsPlist .github/deployment/ExportOptions-Prod.plist

      - name: Setup App Store Connect API key
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        run: |
          mkdir -p ~/.appstoreconnect/private_keys
          echo "$APP_STORE_CONNECT_API_KEY_CONTENT" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY_ID}.p8

      - name: Upload to TestFlight
        id: testflight_upload
        shell: bash
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          xcrun altool --validate-app -f $RUNNER_TEMP/export/Sayar.ipa -t ios --apiKey $APP_STORE_CONNECT_API_KEY_ID --apiIssuer $APP_STORE_CONNECT_ISSUER_ID --use-old-altool
          xcrun altool --upload-app -f $RUNNER_TEMP/export/Sayar.ipa -t ios --apiKey $APP_STORE_CONNECT_API_KEY_ID --apiIssuer $APP_STORE_CONNECT_ISSUER_ID --use-old-altool
          echo "‚úÖ TestFlight upload successful"

      - name: Commit CHANGELOG and create tag after successful deployment
        if: success()
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          if ! git diff --staged --quiet; then
            git commit -m "chore(release): prepare v${VERSION} [skip ci]"
            git tag -a "v${VERSION}" -m "Release v${VERSION}"
            git push origin master || echo "‚ö†Ô∏è Failed to push CHANGELOG, but deployment was successful"
            git push origin "v${VERSION}" || echo "‚ö†Ô∏è Failed to push tag, but deployment was successful"
            echo "‚úÖ CHANGELOG and tag v${VERSION} created"
          else
            echo "‚ÑπÔ∏è No CHANGELOG changes to commit"
          fi

      - name: Clean up keychain
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
